{"version":3,"sources":["components/Navbar.js","components/TextForm.js","components/Alert.js","App.js","index.js"],"names":["Navbar","props","className","mode","onClick","toggleMode","type","id","htmlFor","TextForm","handleOnChange","event","setText","target","value","useState","text","style","color","heading","onChange","backgroundColor","rows","disabled","length","newText","toUpperCase","showAlert","toLowerCase","navigator","clipboard","writeText","split","join","filter","element","Alert","height","alert","role","word","lower","charAt","slice","capitalize","msg","App","setMode","setAlert","message","setTimeout","title","document","body","Date","exact","path","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.3705c960.chunk.js","sourcesContent":["import React from 'react'\nexport default function Navbar(props) {\n    return (\n      <>   \n                    <div className={`form-check form-switch text-${props.mode==='light'?'dark':'light'}`}>\n                        <input className=\"form-check-input\" onClick={props.toggleMode} type=\"checkbox\" id=\"flexSwitchCheckDefault\"/>\n                        <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">Enable DarkMode</label>\n                    </div>\n      </>\n           \n    )\n}\n\n\n\n","import React, {useState} from 'react'\n\n\nexport default function TextForm(props) {\n    const handleUpClick = ()=>{\n        let newText = text.toUpperCase();\n        setText(newText)\n        props.showAlert(\"Converted to uppercase!\", \"success\");\n    }\n\n    const handleLoClick = ()=>{ \n        let newText = text.toLowerCase();\n        setText(newText)\n        props.showAlert(\"Converted to lowercase!\", \"success\");\n    }\n\n    const handleClearClick = ()=>{ \n        let newText = '';\n        setText(newText);\n        props.showAlert(\"Text Cleared!\", \"success\");\n    }\n\n    const handleOnChange = (event)=>{\n        setText(event.target.value) \n    }\n\n    // Credits: A\n    const handleCopy = () => {\n        navigator.clipboard.writeText(text); \n        props.showAlert(\"Copied to Clipboard!\", \"success\");\n    }\n\n    // Credits: Coding Wala\n    const handleExtraSpaces = () => {\n        let newText = text.split(/[ ]+/);\n        setText(newText.join(\" \"));\n        props.showAlert(\"Extra spaces removed!\", \"success\");\n    }\n\n    const [text, setText] = useState(''); \n    // text = \"new text\"; // Wrong way to change the state\n    // setText(\"new text\"); // Correct way to change the state\n    return (\n        <>\n        <div className=\"container\" style={{color: props.mode==='dark'?'white':'#042743'}}> \n            <h1 className='mb-4'>{props.heading}</h1>\n            <div className=\"mb-3\"> \n            <textarea className=\"form-control\" value={text} onChange={handleOnChange} style={{backgroundColor: props.mode==='dark'?'#13466e':'white', color: props.mode==='dark'?'white':'#042743'}} id=\"myBox\" rows=\"8\"></textarea>\n            </div>\n            <button disabled={text.length===0} className=\"btn btn-primary mx-1 my-1\" onClick={handleUpClick}>Convert to Uppercase</button>\n            <button disabled={text.length===0} className=\"btn btn-primary mx-1 my-1\" onClick={handleLoClick}>Convert to Lowercase</button>\n            <button disabled={text.length===0} className=\"btn btn-primary mx-1 my-1\" onClick={handleClearClick}>Clear Text</button>\n            <button disabled={text.length===0} className=\"btn btn-primary mx-1 my-1\" onClick={handleCopy}>Copy Text</button>\n            <button disabled={text.length===0} className=\"btn btn-primary mx-1 my-1\" onClick={handleExtraSpaces}>Remove Extra Spaces</button>\n        </div>\n        <div className=\"container my-3\" style={{color: props.mode==='dark'?'white':'#042743'}}>\n            <h2>Your text summary</h2>\n            <p>{text.split(/\\s+/).filter((element)=>{return element.length!==0}).length} words and {text.length} characters</p>\n            <p>{0.008 *  text.split(/\\s+/).filter((element)=>{return element.length!==0}).length} Minutes read</p>\n            <h2>Preview</h2>\n            {/* <p>{text.length>0?text:\"Nothing to preview!\"}</p> */}\n\n            <textarea className=\"form-control\" value={text.length>0?text:\"Nothing to preview!\"} onChange={handleOnChange} id=\"myBox\" rows=\"8\"></textarea>\n        </div>\n        </>\n    )\n}\n","import React from 'react'\n\nfunction Alert(props) {\n    const capitalize = (word)=>{\n        const lower = word.toLowerCase();\n        return lower.charAt(0).toUpperCase() + lower.slice(1);\n    }\n    return (\n        <div style={{height: '50px'}}>\n        {props.alert && <div className={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">\n           <strong>{capitalize(props.alert.type)}</strong>: {props.alert.msg} \n        </div>}\n        </div>\n    )\n}\n\nexport default Alert\n","\nimport Navbar from './components/Navbar';\nimport TextForm from './components/TextForm';\nimport React, { useState } from 'react';\nimport Alert from './components/Alert';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route\n} from \"react-router-dom\";\n\n \nfunction App() {\n  const [mode, setMode] = useState('light'); // Whether dark mode is enabled or not\n  const [alert, setAlert] = useState(null);\n\n  const showAlert = (message, type)=>{\n      setAlert({\n        msg: message,\n        type: type\n      })\n      setTimeout(() => {\n          setAlert(null);\n      }, 1500);\n  }\n\n  const toggleMode = ()=>{\n    if(mode === 'light'){\n      setMode('dark');\n      document.body.style.backgroundColor = '#042743';\n      showAlert(\"Dark mode has been enabled\", \"success\");\n    }\n    else{\n      setMode('light');\n      document.body.style.backgroundColor = 'white';\n      showAlert(\"Light mode has been enabled\", \"success\");\n    }\n  }\n  return (\n    <>\n    <Router>\n    <Navbar title=\"TextUtils\" mode={mode} toggleMode={toggleMode} key={new Date()} />\n    <Alert alert={alert}/>\n    <div className=\"container my-3\">\n    <Switch>\n    {/* /users --> Component 1\n        /users/home --> Component 2 */}\n          <Route exact path=\"/about\">\n           \n          </Route>\n          <Route exact path=\"/\">\n            <TextForm showAlert={showAlert} heading=\"Try TextUtils - word counter, character counter, remove extra spaces\" mode={mode}/>\n          </Route>\n    </Switch>\n    </div>\n    </Router>\n    </> \n  );\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n"],"sourceRoot":""}